{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts", "../../../src/lib/remark-img-to-jsx.ts"],
  "sourcesContent": ["import {\r\n  ComputedFields,\r\n  defineDocumentType,\r\n  makeSource,\r\n} from 'contentlayer/source-files';\r\n\r\nimport readingTime from 'reading-time';\r\nimport remarkGfm from 'remark-gfm';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport rehypeCodeTitles from 'rehype-code-titles';\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\nimport rehypePrism from 'rehype-prism-plus';\r\nimport rehypeKatex from 'rehype-katex';\r\nimport remarkMath from 'remark-math';\r\nimport remarkImgToJsx from './src//lib/remark-img-to-jsx';\r\n\r\nconst computedFields: ComputedFields = {\r\n  readingTime: {\r\n    type: 'json',\r\n    resolve: (doc) => readingTime(doc.body.raw),\r\n  },\r\n  slug: {\r\n    type: 'string',\r\n    resolve: (doc) =>\r\n      doc._raw.sourceFileName.replace(\r\n        /\\.mdx$/,\r\n        ''\r\n      ),\r\n  },\r\n};\r\n\r\nconst Blog = defineDocumentType(() => ({\r\n  name: 'Blog',\r\n  filePathPattern: 'blog/**/*.mdx',\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: { type: 'string', required: true },\r\n    date: { type: 'string', required: true },\r\n    summary: { type: 'string', required: true },\r\n    image: { type: 'string', required: true },\r\n    draft: { type: 'boolean', required: false },\r\n    tags: {\r\n      type: 'list',\r\n      of: {\r\n        type: 'string',\r\n      },\r\n      default: ['Ki\u1EC7t MMO'],\r\n      description: 'Tags for the post',\r\n      required: false,\r\n    },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\n// const Page = defineDocumentType(() => ({\r\n//   name: 'Page',\r\n//   filePathPattern: 'pages/*.mdx',\r\n//   contentType: 'mdx',\r\n//   fields: {\r\n//     title: { type: 'string', required: true },\r\n//     description: {\r\n//       type: 'string',\r\n//       required: true,\r\n//     },\r\n//   },\r\n//   computedFields,\r\n// }));\r\n\r\nconst contentLayerConfig = makeSource({\r\n  contentDirPath: 'data',\r\n  documentTypes: [Blog],\r\n  mdx: {\r\n    remarkPlugins: [\r\n      remarkGfm,\r\n      remarkMath,\r\n      remarkImgToJsx,\r\n    ],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      rehypeCodeTitles,\r\n      rehypePrism,\r\n      rehypeKatex,\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: ['anchor'],\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});\r\n\r\nexport default contentLayerConfig;\r\n", "import { visit } from 'unist-util-visit';\r\nimport sizeOf from 'image-size';\r\nimport fs from 'fs';\r\n\r\nexport default function remarkImgToJsx() {\r\n  return (tree: any) => {\r\n    visit(\r\n      tree,\r\n      // only visit p tags that contain an img element\r\n      (node: any) =>\r\n        node.type === 'paragraph' &&\r\n        node.children.some(\r\n          (n: any) => n.type === 'image'\r\n        ),\r\n      (node: any) => {\r\n        const imageNode = node.children.find(\r\n          (n: any) => n.type === 'image'\r\n        );\r\n\r\n        // only local files\r\n        if (\r\n          fs.existsSync(\r\n            `${process.cwd()}/public${\r\n              imageNode.url\r\n            }`\r\n          )\r\n        ) {\r\n          const dimensions = sizeOf(\r\n            `${process.cwd()}/public${\r\n              imageNode.url\r\n            }`\r\n          );\r\n\r\n          // Convert original node to next/image\r\n          (imageNode.type = 'mdxJsxFlowElement'),\r\n            (imageNode.name = 'Image'),\r\n            (imageNode.attributes = [\r\n              {\r\n                type: 'mdxJsxAttribute',\r\n                name: 'alt',\r\n                value: imageNode.alt,\r\n              },\r\n              {\r\n                type: 'mdxJsxAttribute',\r\n                name: 'src',\r\n                value: imageNode.url,\r\n              },\r\n              {\r\n                type: 'mdxJsxAttribute',\r\n                name: 'width',\r\n                value: dimensions.width,\r\n              },\r\n              {\r\n                type: 'mdxJsxAttribute',\r\n                name: 'height',\r\n                value: dimensions.height,\r\n              },\r\n            ]);\r\n\r\n          // Change node type from p to div to avoid nesting error\r\n          node.type = 'div';\r\n          node.children = [imageNode];\r\n        }\r\n      }\r\n    );\r\n  };\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
